name: Test and Deploy

on:
  # Run this workflow every time a PR is opened or a new commit is pushed to the PR
  pull_request:
  # Run this workflow every time a PR is merged to main or a release tag is added
  push:
    branches:
      - main
    tags:
      - '*'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Setup conda env
        run: |
          source "$CONDA/etc/profile.d/conda.sh"
          conda config --set always_yes yes --set changeps1 no
          conda update -q conda
          conda info -a
          conda install -q conda-build
          conda env create -f continuous_integration/environment.yml
          conda activate mg
          pip install -e .
      - name: Lint with Black
        run: |
          source "$CONDA/etc/profile.d/conda.sh"
          conda activate mg
          black metagraph *.py --check --diff
      - name: Pytest
        run: |
          source "$CONDA/etc/profile.d/conda.sh"
          conda activate mg
          pytest metagraph
          pytest metagraph --dask --cov-append
      - name: Coveralls
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          source "$CONDA/etc/profile.d/conda.sh"
          conda activate mg
          conda install -c conda-forge coveralls
          coveralls --service=github
      - name: Conda Build
        run: |
          source "$CONDA/etc/profile.d/conda.sh"
          conda build -c defaults -c conda-forge --python 3.8 continuous_integration/conda
          # This doesn't rebuild, but simply computes the name of the file that was previously built
          OUTPUT=$(conda build --output -c defaults -c conda-forge --python 3.8 continuous_integration/conda)
          echo $OUTPUT
          # Build tarball of output
          mkdir tarball
          cd tarball
          for outpt in $OUTPUT; do
            cp $outpt .
          done
          tar -cf output.tar `ls`
          echo "CONDA_BUILD_OUTPUT=`pwd`/output.tar" >> $GITHUB_ENV
      - name: Upload build artifact
        uses: actions/upload-artifact@v2
        with:
          name: built_package
          path: ${{ env.CONDA_BUILD_OUTPUT }}
          retention-days: 7

  test_pyver:
    runs-on: ubuntu-latest
    needs: build
    strategy:
      matrix:
        pyver:
          - 3.7
          - 3.8
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v2
        with:
          name: built_package
          path: ./artifact_storage
      - name: Setup conda env
        run: |
          source "$CONDA/etc/profile.d/conda.sh"
          conda config --set always_yes yes --set changeps1 no
          conda update -q conda
          conda create -n mg python=${{ matrix.pyver }}
          conda activate mg
          # Install built_packages
          cd ./artifact_storage
          tar -xvf output.tar
          rm output.tar
          conda install `ls`
          cd ..
          # Install dependencies listed in built package
          # (This is a workaround because conda does not install dependencies for local file installs)
          conda update -c defaults -c conda-forge metagraph-dev
          conda list
      - name: Pytest
        run: |
          source "$CONDA/etc/profile.d/conda.sh"
          conda activate mg
          python -m metagraph.tests
          python -m metagraph.tests --dask

  dev_deploy:
    runs-on: ubuntu-latest
    needs: test_pyver
    if: (github.ref == 'refs/heads/main') || contains(github.ref, 'refs/tags/')
    env:
      AC_LABEL: dev
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v2
        with:
          name: built_package
          path: ./artifact_storage
      - name: Determine label
        if: contains(github.ref, 'refs/tags/')
        run: |
          echo "AC_LABEL=main" >> $GITHUB_ENV
      - name: Deploy to Anaconda Cloud
        run: |
          source "$CONDA/etc/profile.d/conda.sh"
          conda config --set always_yes yes --set changeps1 no
          conda install -q anaconda-client
          cd ./artifact_storage
          tar -xvf output.tar
          rm output.tar
          ls -la .
          UPLOAD=`ls .`
          echo "Uploading $UPLOAD with label=${{ env.AC_LABEL }}"
          $CONDA/bin/anaconda -t ${{ secrets.ANACONDA_ORG_TOKEN }} upload -u metagraph -l ${{ env.AC_LABEL }} --no-progress --force --no-register $UPLOAD
